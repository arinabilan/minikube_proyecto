docker build -t mtisw/backend:latest .
docker run -d -p 8010:8002 mtisw/backend
docker login
docker push mtisw/backend:latest

minikube ip

minikube start --driver=hyperv
minikube status

kubectl get deployments
kubectl get services
kubectl get pods -o wide
kubectl get nodes -o wide

kubectl get secret
kubectl get configmap
kubectl get pvc

kubectl apply -f mysql-configmap.yml
kubectl apply -f mysql-user-secret.yml
kubectl apply -f mysql-root-secret.yml
kubectl apply -f mysql-deployment.yml
kubectl apply -f backend-deployment.yml

kubectl get configmap
kubectl get secrets

kubectl delete deployment backend
kubectl delete service backend
kubectl delete deployment mysql
kubectl delete service mysql
kubectl delete configmap mysql-db
kubectl delete secret mysql-root-credentials
kubectl delete secret mysql-user-credentials
kubectl delete pvc mysql-pv-claim

+++++++++++++++++++++++++++++++++++++++
http://172.20.192.74:30500/book

172.20.192.74: es el IP donde esta minikube
30500: es el puerto Nodeport

----------------------------------
https://www.base64decode.org/
----------------------------------


#################################################################
PASOS PARA SUBIR UN MICROSERVICIO
----------------------------------
[optional] actualizar mysql-configmap => kubectl apply -f <mysql-configmap.yml>
1) subir servicio-db-deployment => kubectl apply -f <archivo-db.yml>
2) copiar script sql a pod => kubectl cp <archivo> <pod>:<archivo>
3) ejecutar script => mysql -u root -p < /<archivo>
4) subir servicio-deployment => kubectl apply -f <archivo-db.yml>

## NOTA: ##
Si el microservicio o bd ya existe y se está ejecutando:
1) Actualizar servicio => kubectl apply -f <archivo-db.yml>
2) Reiniciar servicio después de la actualización => kubectl rollout restart deployment <nombre del servicio>
ej: kubectl rollout restart deployment simulate

----------------------------------
Copiar un archivo a un pods:
----------------------------------
archivo: init-simulate.sql
pod: simulation-db-deployment-6655b65d6b-db5nk

kubectl cp .\init-simulate.sql simulation-db-deployment-6655b65d6b-db5nk:init-simulate.sql

----------------------------------
Entrar al shell de un pod:
----------------------------------
pod: simulation-db-deployment-6655b65d6b-db5nk

kubectl exec -it simulation-db-deployment-6655b65d6b-db5nk -- /bin/bash

----------------------------------
Importar el archivo a mysql del pod:
----------------------------------
mysql -u root -p < /init-simulate.sql

----------------------------------
Mysql:
----------------------------------
Ingreso con root:
mysql -u root -p (pide clave después de ENTER)

Ingreso con usuario:
mysql -u <usuario> -p (pide clave después de ENTER)

Mostrar bases de datos:
show databases;

Usar o posicionarse en una base de datos:
use `bankservice-simulate`;

Mostrar las tablas:
show tables;

Mostrar la definición (estructura) de una tabla:
describe simulate_entity;
#################################################################


POR SI SE CAE MINIKUBE,O SE ELIMINA

kubectl apply -f mysql-config-map.yml
kubectl apply -f mysql-secret.yml
kubectl apply -f configService.yml
kubectl apply -f eurekaService.yml
kubectl apply -f gateway-service.yml

kubectl apply -f simulate-db-deployment.yml
kubectl get pods
kubectl cp init-simulate.sql simulate-db-deployment-69d9fc9ffb-dlxb5:init-simulate.sql
kubectl exec -it simulate-db-deployment-69d9fc9ffb-dlxb5 -- /bin/bash
mysql -u root -p < /init-simulate.sql
kubectl apply -f simulate-deployment.yml

kubectl apply -f register-db-deployment.yml
kubectl get pods
kubectl cp init-register.sql register-db-deployment-69d9fc9ffb-dlxb5:init-register.sql
kubectl exec -it register-db-deployment-69d9fc9ffb-dlxb5 -- /bin/bash
mysql -u root -p < /init-register.sql
kubectl apply -f register-deployment.yml

kubectl apply -f solicitude-db-deployment.yml
kubectl get pods
kubectl cp init-solicitude.sql solicitude-db-deployment-69d9fc9ffb-dlxb5:init-solicitude.sql
kubectl exec -it solicitude-db-deployment-69d9fc9ffb-dlxb5 -- /bin/bash
mysql -u root -p < /init-solicitude.sql
kubectl apply -f solicitude-deployment.yml

kubectl apply -f loanevaluation-db-deployment.yml
kubectl get pods
kubectl cp init-loanevaluation.sql loanevaluation-db-deployment-69d9fc9ffb-dlxb5:init-loanevaluation.sql
kubectl exec -it loanevaluation-db-deployment-69d9fc9ffb-dlxb5 -- /bin/bash
mysql -u root -p < /init-loanevaluation.sql
kubectl apply -f loanevaluation-deployment.yml

kubectl apply -f tracking-db-deployment.yml
kubectl get pods
kubectl cp init-tracking.sql tracking-db-deployment-69d9fc9ffb-dlxb5:init-tracking.sql
kubectl exec -it tracking-db-deployment-69d9fc9ffb-dlxb5 -- /bin/bash
mysql -u root -p < /init-tracking.sql
kubectl apply -f tracking-deployment.yml

kubectl apply -f frontend-deployment.yml

kubectl port-forward gateway-service-599f4d8478-4zrns 8090:8090


-------------------------------------------------------------------
DOCKER
-------------------------------------------------------------------
npm run build
docker build -t aribakan/frontend-microservicios:latest .
docker push aribakan/frontend-microservicios:latest

docker build -t aribakan/configservice:latest .
docker push aribakan/configservice:latest

docker build -t aribakan/eurekaservice:latest .
docker push aribakan/eurekaservice:latest

docker build -t aribakan/gateway-service:latest .
docker push aribakan/gateway-service:latest

docker build -t aribakan/simulate:latest .
docker push aribakan/simulate:latest

docker build -t aribakan/register:latest .
docker push aribakan/register:latest

docker build -t aribakan/solicitude:latest .
docker push aribakan/solicitude:latest

docker build -t aribakan/loanevaluation:latest .
docker push aribakan/loanevaluation:latest

docker build -t aribakan/tracking:latest .
docker push aribakan/tracking:latest
-------------------------------------------------------------------
MYSQL
-------------------------------------------------------------------
Ingreso con root:
mysql -u root -p (pide clave después de ENTER)

Ingreso con usuario:
mysql -u <usuario> -p (pide clave después de ENTER)

Mostrar bases de datos:
show databases;

Usar o posicionarse en una base de datos:
use `bankservice-simulate`;

Mostrar las tablas:
show tables;

Mostrar la definición (estructura) de una tabla:
describe simulate_entity;


-------------------------------------------------------------------
MINIKUBE
-------------------------------------------------------------------
minikube ssh

